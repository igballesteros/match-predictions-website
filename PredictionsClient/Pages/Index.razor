@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Home</PageTitle>

@if (!initialized)
{
    <p>Loading authentication state...</p>
}

else
{

    <div class="alert alert-info">
        <p>Auth State: @(authState.User.Identity?.IsAuthenticated ?? false ? "Authenticated" : "Not")</p>
        <p>Username: @user?.Identity?.Name</p>
        <p>Is Admin: @user?.IsInRole("Admin")</p>
        <p>Claims:</p>
        <ul>
            @if (user != null)
            {
                @foreach (var claim in user.Claims)
                {
                    <li>@claim.Type: @claim.Value</li>
                }
            }
        </ul>
    </div>

    @if (authState == null || user == null)
    {
        <p>Loading...</p>
    }
    else if (!user.Identity.IsAuthenticated)
    {
        <GuestDashboard />
    }
    else if (user.IsInRole("Admin"))
    {
        <AdminDashboard />
    }
    else
    {
        <UserDashboard />
    }
}

@code {
    private AuthenticationState? authState;
    private ClaimsPrincipal user = new ClaimsPrincipal(); // Initialize with empty user
    private bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authState = await AuthStateProvider.GetAuthenticationStateAsync();
            user = authState?.User ?? new ClaimsPrincipal();
        }
        catch (Exception ex)
        {
            // Log error if needed
            Console.WriteLine($"Error loading auth state: {ex.Message}");
        }
        finally
        {
            initialized = true;
        }
    }
}